import import_resources

def confirmation():
    print(f"\nConfirm your requirement 'y' or 'Y', if not enter 'n' or 'N'")
    confirm = input("Are you sure. Confirm [Y/N]: ")

    if confirm == 'y' or confirm == 'Y':
        host_dis()
        os_dis()
        vuln_dis()
        report_view()
    elif confirm == 'n' or confirm == 'N':
        import_resources.main_menu(import_resources.no)
    else:
        print("Invalid input. Please try again.")
        confirmation()

def host_dis():
    ip_addr = input('Enter the IP address: ')
    nm = import_resources.nmap.PortScanner()
    nm.scan(ip_addr, arguments='-sn')
    import_resources.hosts.clear()
    print(F"\n")
    for h in nm.all_hosts():
        import_resources.hosts.append((h, nm[h].hostname()))

        # Print information about each host
        print(f"IP Address: {h}")
        print(f"Hostname: {nm[h].hostname()}")
        # Check if MAC Address information is available
        mac_address = nm[h]['addresses'].get('mac', 'Not Available')
        print(f"MAC Address: {mac_address}")
        vendor_info = nm[h]['vendor']
        vendor = vendor_info.get(mac_address, 'Not Available')
        print(f"Vendor: {vendor}")
        print(f"State: {nm[h].state()}")

        for proto in nm[h].all_protocols():
            print(f"Protocol: {proto}")
            lport = nm[h][proto].keys()
        # Print a separator between hosts
        print("="*50)
    print(f"\nDerived IP addresses are:\n")    
    for ho in import_resources.hosts:
        print(f"Host: {ho[0]}")

def os_dis():
    for host in import_resources.hosts:
        nm = import_resources.nmap.PortScanner()
        nm.scan(host[0], arguments='-O --osscan-guess')
        for h in nm.all_hosts():
            address = nm[h]['addresses']
            vendor = nm[h]['vendor']
            osmatch = nm[h]['osmatch']
            for osmatch in nm[h]['osmatch']:
                print(f"Host {h} is running: {osmatch['name']}")
                import_resources.os_array.append(osmatch['name'])


def vuln_dis():
    severity_levels = ['LOW', 'MEDIUM', 'HIGH']
        
    for os_name in import_resources.os_array:
        # Modify OS name as per requirements
        os_name = os_name.split(" (")[0]  # Remove content inside parentheses
        os_name = os_name.replace("-", "").strip()  # Remove hyphen and leading/trailing whitespaces

        # Split the string to handle 'DD-WRT v24 or v30' case
        if ' or ' in os_name:
            os_names = os_name.split(' or ')
            os_names = [name.replace(" v", " ") for name in os_names]
        else:
            os_names = os_name.replace(" v", " ").split(' or ')
            
        # Split the string to handle 'DD-WRT v24 or v30' case
        final_os_names = []
        for name in os_names:
            if ' v' in name:
                name_parts = name.split(' v')
                for i in range(1, len(name_parts)):
                    name_parts[i] = name_parts[i].split('(')[0].strip()
                final_os_names.append(' v'.join(name_parts))
            else:
                final_os_names.append(name)

        for name in final_os_names:
            for severity_level in severity_levels:
                print(f"OS: {name}")
                print(f"\t{severity_level}")
                file_name = f'{name}_cve_results_{severity_level}.txt'
                file_path = import_resources.os.path.join(import_resources.reports_dir, file_name)

                r = import_resources.nvdlib.searchCVE(keywordSearch=name, cvssV2Severity=severity_level, limit=5)
                with open(file_path, 'w') as f:
                    for eachCVE in r:
                        f.write(f"CVE_Id: {eachCVE.id}\nCVE_Score: {str(eachCVE.score)}\nCVE_Description {eachCVE.descriptions}\nCVE_url{eachCVE.url}\n\n")
                        print(f"CVE_Id: {eachCVE.id}\tCVE_Score: {str(eachCVE.score)}\tCVE_url{eachCVE.url}")
                if import_resources.os.path.getsize(file_path) == 0:
                    import_resources.os.remove(file_path)
                    print(f"Empty file deleted: {file_path}")            

def report_view():
    reports_dir = import_resources.os.path.join(import_resources.os.path.expanduser("~/Documents"), "IoT_Vulnerability_Reports")
    folder_list = import_resources.os.listdir(reports_dir)

    for i, folder in enumerate(folder_list, start=1):
        print(f"{i}. {folder}")

    print(f"{len(folder_list) + 1}. Go back")  # Added Go back option for folders

    while True:
        folder_num = input("Enter the folder number: ")
        if folder_num.isdigit() and 1 <= int(folder_num) <= len(folder_list) + 1:
            break
        else:
            print("Invalid folder number. Please try again.")

    if int(folder_num) == len(folder_list) + 1:  # If Go back option is selected
        import_resources.main_menu(import_resources.no)
        return

    chosen_folder = folder_list[int(folder_num) - 1]
    chosen_folder_path = import_resources.os.path.join(reports_dir, chosen_folder)

    file_list = import_resources.os.listdir(chosen_folder_path)

    for i, file in enumerate(file_list, start=1):
        print(f"{i}. {file}")

    print(f"{len(file_list) + 1}. Go back")  # Added Go back option for files

    while True:
        file_num = input("Enter the file number: ")
        if file_num.isdigit() and 1 <= int(file_num) <= len(file_list) + 1:
            break
        else:
            print("Invalid file number. Please try again.")

    if int(file_num) == len(file_list) + 1:  # If Go back option is selected
        import_resources.report()
        return

    chosen_file = file_list[int(file_num) - 1]
    chosen_file_path = import_resources.os.path.join(chosen_folder_path, chosen_file)

    with open(chosen_file_path, 'r') as f:
        print(f"Contents of {chosen_file}:")
        print(f.read())
    import_resources.menu_exit()