import import_resources


def generate_reports():
    if not import_resources.hosts:
        import_resources.host_dis()
        import_resources.os_dis()
        import_resources.vuln_dis()
    else:
        severity_levels = ['LOW', 'MEDIUM', 'HIGH']
        
        for os_name in import_resources.os_array:
            # Modify OS name as per requirements
            os_name = os_name.split(" (")[0]  # Remove content inside parentheses
            os_name = os_name.replace("-", "").strip()  # Remove hyphen and leading/trailing whitespaces

            # Split the string to handle 'DD-WRT v24 or v30' case
            if ' or ' in os_name:
                os_names = os_name.split(' or ')
                os_names = [name.replace(" v", " ") for name in os_names]
            else:
                os_names = os_name.replace(" v", " ").split(' or ')
            
            # Split the string to handle 'DD-WRT v24 or v30' case
            final_os_names = []
            for name in os_names:
                if ' v' in name:
                    name_parts = name.split(' v')
                    for i in range(1, len(name_parts)):
                        name_parts[i] = name_parts[i].split('(')[0].strip()
                    final_os_names.append(' v'.join(name_parts))
                else:
                    final_os_names.append(name)

            for name in final_os_names:
                for severity_level in severity_levels:
                    print(f"OS: {name}")
                    print(f"\t{severity_level}")
                    file_name = f'{name}_cve_results_{severity_level}.txt'
                    file_path = import_resources.os.path.join(import_resources.reports_dir, file_name)

                    r = import_resources.nvdlib.searchCVE(keywordSearch=name, cvssV2Severity=severity_level, limit=5)
                    with open(file_path, 'w') as f:
                        for eachCVE in r:
                            f.write(f"CVE_Id: {eachCVE.id}\nCVE_Score: {str(eachCVE.score)}\nCVE_Description {eachCVE.descriptions}\nCVE_url{eachCVE.url}\n\n")
                            print(f"CVE_Id: {eachCVE.id}\tCVE_Score: {str(eachCVE.score)}\tCVE_url{eachCVE.url}")
                    if import_resources.os.path.getsize(file_path) == 0:
                        import_resources.os.remove(file_path)
                        print(f"Empty file deleted: {file_path}")
       
        import_resources.menu_exit()
